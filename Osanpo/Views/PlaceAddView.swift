//
//  PlaceAddView.swift
//  Osanpo
//
//  Created by ÈÖí‰∫ï„Åø„Å™ÂÆü on 2025/06/01.
//

import SwiftUI
import SwiftData

struct PlaceAddView: View {
    @Environment(\.dismiss) private var dismiss
    @Environment(\.modelContext) private var modelContext
    @FocusState private var isTextFieldFocused: Bool

    @State private var placeName: String = ""
    @State private var selectedSeasons: Set<Season> = []
    @State private var selectedMonths: Set<String> = []

    // ‚úÖ „Ç¢„É©„Éº„ÉàÁî®„Éï„É©„Ç∞
    @State private var showSaveAlert = false

    var body: some View {
        ZStack {
            Image("sky_background")
                .resizable()
                .scaledToFill()
                .ignoresSafeArea()

            VStack {
                RoundedRectangle(cornerRadius: 20)
                    .fill(Color.white.opacity(0.75))
                    .frame(width: 340, height: 600)
                    .overlay(
                        ScrollView {
                            VStack(alignment: .leading, spacing: 20) {
                                // üìç Ë°å„Åç„Åü„ÅÑÂ†¥ÊâÄ
                                HStack(spacing: 6) {
                                    Image(systemName: "mappin.and.ellipse")
                                        .foregroundColor(Color(hex: "3B4252"))
                                    Text("Ë°å„Åç„Åü„ÅÑÂ†¥ÊâÄ")
                                        .font(.headline)
                                        .foregroundColor(Color(hex: "3B4252"))
                                }

                                TextField("‰æãÔºö‰∫ï„ÅÆÈ†≠ÂÖ¨Âúí", text: $placeName)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .focused($isTextFieldFocused)

                                // üóìÔ∏è „ÅÑ„Å§Ë°å„Åç„Åü„ÅÑÔºü
                                HStack(spacing: 6) {
                                    Image(systemName: "calendar")
                                        .foregroundColor(Color(hex: "3B4252"))
                                    Text("„ÅÑ„Å§Ë°å„Åç„Åü„ÅÑÔºü")
                                        .font(.headline)
                                        .foregroundColor(Color(hex: "3B4252"))
                                    Text("Ë°å„Åç„Åü„ÅÑÂ≠£ÁØÄ„ÉªÊúà„ÇíÈÅ∏Êäû")
                                        .font(.footnote)
                                        .foregroundColor(.gray)
                                }

                                SeasonMonthPickerViewWrapper(
                                    selectedSeasons: $selectedSeasons,
                                    selectedMonths: $selectedMonths
                                )

                                Spacer(minLength: 40)
                            }
                            .padding(.horizontal, 24)
                            .padding(.top, 32)
                            .padding(.bottom, 80)
                        }
                        .frame(width: 340, height: 600)
                        .keyboardAvoiding()
                    )
            }
        }
        .navigationBarTitleDisplayMode(.inline)
        .navigationBarBackButtonHidden(true) // ‚Üê ‚òÖ Èªí„ÅÑ < „ÇíÊ∂à„Åô
        .toolbarBackground(Color(hex: "FFF4B3").opacity(0.5), for: .navigationBar)
        .toolbarBackground(.visible, for: .navigationBar)
        .toolbarColorScheme(.light, for: .navigationBar)
        .toolbar {
            ToolbarItem(placement: .navigationBarLeading) {
                Button {
                    dismiss()
                } label: {
                    HStack(spacing: 4) {
                        Image(systemName: "chevron.left")
                        Text("„É™„Çπ„Éà")
                    }
                    .foregroundColor(Color(hex: "7C8894"))
                }
            }

            ToolbarItem(placement: .principal) {
                Text("Ë°å„Åç„Åü„ÅÑÂ†¥ÊâÄ„ÇíÁôªÈå≤")
                    .font(.headline)
                    .foregroundColor(Color(hex: "7C8894"))
            }

            ToolbarItem(placement: .navigationBarTrailing) {
                Button(action: {
                    // ‚úÖ „Ç¢„É©„Éº„ÉàË°®Á§∫
                    showSaveAlert = true
                }) {
                    Text("‰øùÂ≠ò")
                        .fontWeight(.bold)
                        .padding(.horizontal, 16)
                        .padding(.vertical, 8)
                        .background(Color.white)
                        .cornerRadius(12)
                }
                .foregroundColor(Color(hex: "7C8894"))
            }
        }

        // ‚úÖ „Ç¢„É©„Éº„ÉàÔºàÁîªÈù¢‰∏≠Â§Æ„Å´Âá∫„Çã„Çø„Ç§„Éó ‚Üí FigmaÈÄö„ÇäÔºÅÔºâ
        .alert("‰øùÂ≠ò„Åó„Åæ„Åô„ÅãÔºü", isPresented: $showSaveAlert) {
            Button("Êàª„Çã", role: .cancel) {
                // ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºàÈñâ„Åò„Çã„Å†„ÅëÔºâ
            }
            Button("‰øùÂ≠ò") {
                savePlace()
            }
        }
    }

    private func savePlace() {
        let newPlace = Place(
            name: placeName,
            seasons: Array(selectedSeasons),
            months: Array(selectedMonths),
            memo: nil,
            photoData: nil,
            shouldNotify: false
        )
        modelContext.insert(newPlace)
        dismiss()
    }
}
